{
    "docs": [
        {
            "location": "/", 
            "text": "WFV is an elegant way to work with custom forms in WordPress.\n\n\nA simple fluid and concise API to manage user input, validation, feedback, and safe output.\n\n\nLet's begin\n\n\n\n\n\n\nNote\n\n\nDocumentation is a work in progress.\n\n\n\n\n\n\nAttention\n\n\nPre-alpha stage - Moderate risk of change.\n\n\n\n\nFeatures\n\n\n\n\nBuilt-in rules\n\n\nCustom rules\n\n\nCustom error messages\n\n\nHelper methods for safe output\n\n\nAuto populate\n\n\nMultiple forms\n\n\nValidation Hooks\n\n\nSelf POST - no redirects, no GET vars, no sessions, no cookies\n\n\nLightweight - Only one dependency (WordPress aside)\n\n\nUnit tested core\n - More stable, quicker fixes, less bugs, more happy\n\n\nNo rendered markup\n\n\nDeveloper freedom", 
            "title": "Welcome"
        }, 
        {
            "location": "/#features", 
            "text": "Built-in rules  Custom rules  Custom error messages  Helper methods for safe output  Auto populate  Multiple forms  Validation Hooks  Self POST - no redirects, no GET vars, no sessions, no cookies  Lightweight - Only one dependency (WordPress aside)  Unit tested core  - More stable, quicker fixes, less bugs, more happy  No rendered markup  Developer freedom", 
            "title": "Features"
        }, 
        {
            "location": "/overview/", 
            "text": "Problem\n\n\nWorking with custom forms in WordPress involves either using some rich WYSIWYG plugin, or writing custom code.\n\n\nNeither approach is wrong, but sometimes less overhead or no awkward code blocks is more ideal.\n\n\nSuppose you are creating a custom form and decide to follow the \nWordPress way\n as a best practice. You create an action that triggers after a http request to /wp-admin/admin-post.php. So far so good, but that form is posting to \nhttp://yoursite.com/wp-admin/admin-post.php\n\n\nWhy is this a problem?\n\n\nAfter submitting, the user is no longer on the form. To send them back (i.e a required field was missed), we need to do a HTTP redirect. At this point the \n$_POST\n with the input is gone... which would have been useful to repopulate the form. In order to persist that input, it needs to be stored in \nGET\n, or in the browser as a session or cookie.\n\n\nNeither is elegant, and both are clunky.\n\n\nSolution\n\n\nWFV gives you the ability to declare form validation constraints in way that is similar to many MVC frameworks.\n\n\nMarkup a form in a template and define its constraints in functions.php or a plugin.\n\n\nYou get a simple but powerful API that makes coding forms more pleasant.\n\n\n\n\nWFV - WordPress Form Validation\n\n\nSafe:\n\n\n1\n$form\n-\nescape\n(\nemail\n);\n\n\n\n\n\n\nAdaptable:\n\n\n1\n$form\n-\ndisplay\n(\nemail\n,\n \nstrip_tags\n)\n\n\n\n\n\n\nFlexible:\n\n\n1\n2\n3\n$form\n-\nescape\n(\nemail\n,\n \nfunction\n(\n \n$input\n \n)\n \n{\n\n  \nreturn\n \nstrip_tags\n(\n \n$input\n \n);\n\n\n});\n\n\n\n\n\n\nAware:\n\n\n1\n$form\n-\ninput\n()\n-\ncontains\n(\n \nemail\n,\n \nfoo@bar.com\n \n);\n\n\n\n\n\n\nHelpful:\n\n\n1\n$form\n-\nerrors\n()\n-\nfirst\n(\nemail\n);\n\n\n\n\n\n\nPragmatic:\n\n\n1\n$form\n-\nselected_if\n(\ncolor\n,\n \ngreen\n);\n\n\n\n\n\n\nSimple:\n\n\n1\n$form\n-\ninput\n()\n-\nhas\n(\nemail\n);\n\n\n\n\n\n\nPowerful:\n\n\n1\n$form\n-\nconstrain\n()\n-\nvalidate\n();\n\n\n\n\n\n\nEnjoy.", 
            "title": "Overview"
        }, 
        {
            "location": "/overview/#problem", 
            "text": "Working with custom forms in WordPress involves either using some rich WYSIWYG plugin, or writing custom code.  Neither approach is wrong, but sometimes less overhead or no awkward code blocks is more ideal.  Suppose you are creating a custom form and decide to follow the  WordPress way  as a best practice. You create an action that triggers after a http request to /wp-admin/admin-post.php. So far so good, but that form is posting to  http://yoursite.com/wp-admin/admin-post.php  Why is this a problem?  After submitting, the user is no longer on the form. To send them back (i.e a required field was missed), we need to do a HTTP redirect. At this point the  $_POST  with the input is gone... which would have been useful to repopulate the form. In order to persist that input, it needs to be stored in  GET , or in the browser as a session or cookie.  Neither is elegant, and both are clunky.", 
            "title": "Problem"
        }, 
        {
            "location": "/overview/#solution", 
            "text": "WFV gives you the ability to declare form validation constraints in way that is similar to many MVC frameworks.  Markup a form in a template and define its constraints in functions.php or a plugin.  You get a simple but powerful API that makes coding forms more pleasant.", 
            "title": "Solution"
        }, 
        {
            "location": "/overview/#wfv-wordpress-form-validation", 
            "text": "Safe:  1 $form - escape ( email );    Adaptable:  1 $form - display ( email ,   strip_tags )    Flexible:  1\n2\n3 $form - escape ( email ,   function (   $input   )   { \n   return   strip_tags (   $input   );  });    Aware:  1 $form - input () - contains (   email ,   foo@bar.com   );    Helpful:  1 $form - errors () - first ( email );    Pragmatic:  1 $form - selected_if ( color ,   green );    Simple:  1 $form - input () - has ( email );    Powerful:  1 $form - constrain () - validate ();    Enjoy.", 
            "title": "WFV - WordPress Form Validation"
        }, 
        {
            "location": "/start/", 
            "text": "Install\n\n\nRequirements\n\n\n\n\nMinimum\n\n\n\n\nWordPress 3.7\n\n\nPHP 5.4\n\n\n\n\n\n\n\n\nRecommended\n\n\n\n\nWordPress 4.7.x\n\n\nPHP 7.0\n\n\n\n\n\n\nPHP 7.0 only with WordPress 4.0+\n\n\nWordPress 4.7+ required for front-end API endpoint\n\n\nPre-release\n\n\n\n\nNote\n\n\nUntil a public release is packaged, install as development\n\n\n\n\nHave a working instance of WordPress\n\n\n1\n2\n3\n4\n5\n6\n7\n$ \ncd\n ./wp-content/plugins\n\n$ git clone https://github.com/macder/wp-form-validation.git\n\n$ \ncd\n wp-form-validation\n\n$ composer install\n\n\n\n\n\n\nActivate the plugin in the admin dashboard", 
            "title": "Getting Started"
        }, 
        {
            "location": "/start/#install", 
            "text": "", 
            "title": "Install"
        }, 
        {
            "location": "/start/#requirements", 
            "text": "Minimum   WordPress 3.7  PHP 5.4     Recommended   WordPress 4.7.x  PHP 7.0    PHP 7.0 only with WordPress 4.0+  WordPress 4.7+ required for front-end API endpoint", 
            "title": "Requirements"
        }, 
        {
            "location": "/start/#pre-release", 
            "text": "Note  Until a public release is packaged, install as development   Have a working instance of WordPress  1\n2\n3\n4\n5\n6\n7 $  cd  ./wp-content/plugins\n\n$ git clone https://github.com/macder/wp-form-validation.git\n\n$  cd  wp-form-validation\n\n$ composer install   Activate the plugin in the admin dashboard", 
            "title": "Pre-release"
        }, 
        {
            "location": "/quick-guide/", 
            "text": "WFV takes an array of arguments that define the rules and error messages for each field in a form.\n\n\nTypically, this is defined in a themes \nfunctions.php\n, but it can be anywhere.\n\n\nThis array is then passed into \nwfv_create( \nmy_form\n, $form_array )\n which creates an instance of \nFormComposite\n.\n\n\nThe \nFormComposite\n encapsulates all the parts and features of the API. It will do a lot of work for you :)\n\n\n\n\nConfig Structure\n\n\nBasic example:\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n?php\n\n\n\n$my_form\n \n=\n \narray\n(\n\n    \nfirst_name\n \n=\n \n[\n\n        \nlabel\n \n=\n \nFirst Name\n,\n\n        \nrules\n \n=\n \nrequired\n\n    \n],\n\n    \nlast_name\n \n=\n \n[\n\n        \nlabel\n \n=\n \nLast Name\n,\n\n        \nrules\n \n=\n \nrequired\n\n    \n],\n\n\n);\n\n\n\n\n\n\n\n\nValidation Rules\n\n\nThe \nrules\n attribute defines the constraint(s) for a field.\n\n\nYou can define multiple rules for a single field by separating each field with a pipe character.\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n?php\n\n\n\n$my_form\n \n=\n \narray\n(\n\n    \nfirst_name\n \n=\n \n[\n\n        \nlabel\n \n=\n \nFirst Name\n,\n\n        \nrules\n \n=\n \nrequired|alpha_dash|max:30\n\n    \n],\n\n    \nemail\n \n=\n \n[\n\n        \nlabel\n \n=\n \nEmail\n,\n\n        \nrules\n \n=\n \nrequired|email\n\n    \n],\n\n\n);\n\n\n\n\n\nYou can use \nbuilt-in\n ones and \ncreate your own\n.\n\n\n\n\nError Messages\n\n\nEach rule has a default error message, but you may override them with custom ones.\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n?php\n\n\n\n$my_form\n \n=\n \narray\n(\n\n    \nfirst_name\n \n=\n \n[\n\n        \nlabel\n \n=\n \nFirst Name\n,\n\n        \nrules\n \n=\n \nrequired|alpha_dash|max:30\n,\n\n        \nmessages\n \n=\n \n[\n\n            \nrequired\n      \n=\n \nPlease enter your first name\n,\n\n            \nalpha_dash\n    \n=\n \nFirst name can only contain alphabetic characters, dashes, and underscores\n,\n\n        \n]\n\n    \n]\n\n\n);\n\n\n\n\n\nMore details about \nerror messages\n.\n\n\n\n\nActivate\n\n\nPass the array of arguments into the \nwfv_create()\n function to get an instance of \nWFV\\FormComposite\n.\n\n\nThis will magically turn that boring array into a rich composite object.\n\n\nExample:\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n?php\n\n\n\n$form\n \n=\n \narray\n(\n \n$rules\n,\n \n$messages\n \n);\n\n\nwfv_create\n(\n \nmy_form\n,\n \n$my_form\n \n);\n\n\n\n// $my_form is now an instance of FormComposite\n\n\n\n$my_form\n-\ninput\n()\n-\ncontains\n(\nemail\n,\n \nfoo@bar.com\n);\n  \n// false\n\n\n$my_form\n-\ninput\n()\n-\nis_populated\n();\n \n// false\n\n\n$my_form\n-\ndisplay\n(\nemail\n);\n\n\n// ...\n\n\n\n\n\n\n\n\nNote\n\n\nThe instance is passed by reference to the array of arguments. You do not need to assign it to a variable.\n\n\n$my_form\n becomes an instance of FormComposite:\n\n1\nwfv_create( \nform_name\n, array $my_form )\n\n\n\n\n\n\n\nFor available methods, see \ninput\n, \npopulate\n, and \nerrors\n\n\n\n\nValidation Callbacks\n\n\nWFV triggers an \naction\n for \npass\n or \nfail\n. Hook into them and handle any logic inside callbacks\n\n\n\n\nMarkup a Form\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nform\n \nname\n=\ncontact_form\n \nmethod\n=\npost\n\n    \ninput\n \nname\n=\nname\n \ntype\n=\ntext\n\n    \ninput\n \nname\n=\nemail\n \ntype\n=\ntext\n\n    \ntextarea\n \nname\n=\nmsg\n/\ntextarea\n\n\n    \n?php $form-\ntoken_fields(); ?\n\n    \ninput\n \ntype\n=\nsubmit\n \nvalue\n=\nSubmit\n\n\n/\nform", 
            "title": "Quick Guide"
        }, 
        {
            "location": "/quick-guide/#config-structure", 
            "text": "Basic example:  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 ?php  $my_form   =   array ( \n     first_name   =   [ \n         label   =   First Name , \n         rules   =   required \n     ], \n     last_name   =   [ \n         label   =   Last Name , \n         rules   =   required \n     ],  );", 
            "title": "Config Structure"
        }, 
        {
            "location": "/quick-guide/#validation-rules", 
            "text": "The  rules  attribute defines the constraint(s) for a field.  You can define multiple rules for a single field by separating each field with a pipe character.  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 ?php  $my_form   =   array ( \n     first_name   =   [ \n         label   =   First Name , \n         rules   =   required|alpha_dash|max:30 \n     ], \n     email   =   [ \n         label   =   Email , \n         rules   =   required|email \n     ],  );   \nYou can use  built-in  ones and  create your own .", 
            "title": "Validation Rules"
        }, 
        {
            "location": "/quick-guide/#error-messages", 
            "text": "Each rule has a default error message, but you may override them with custom ones.  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 ?php  $my_form   =   array ( \n     first_name   =   [ \n         label   =   First Name , \n         rules   =   required|alpha_dash|max:30 , \n         messages   =   [ \n             required        =   Please enter your first name , \n             alpha_dash      =   First name can only contain alphabetic characters, dashes, and underscores , \n         ] \n     ]  );   \nMore details about  error messages .", 
            "title": "Error Messages"
        }, 
        {
            "location": "/quick-guide/#activate", 
            "text": "Pass the array of arguments into the  wfv_create()  function to get an instance of  WFV\\FormComposite .  This will magically turn that boring array into a rich composite object.  Example:  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 ?php  $form   =   array (   $rules ,   $messages   );  wfv_create (   my_form ,   $my_form   );  // $my_form is now an instance of FormComposite  $my_form - input () - contains ( email ,   foo@bar.com );    // false  $my_form - input () - is_populated ();   // false  $my_form - display ( email );  // ...     Note  The instance is passed by reference to the array of arguments. You do not need to assign it to a variable.  $my_form  becomes an instance of FormComposite: 1 wfv_create(  form_name , array $my_form )    For available methods, see  input ,  populate , and  errors", 
            "title": "Activate"
        }, 
        {
            "location": "/quick-guide/#validation-callbacks", 
            "text": "WFV triggers an  action  for  pass  or  fail . Hook into them and handle any logic inside callbacks", 
            "title": "Validation Callbacks"
        }, 
        {
            "location": "/quick-guide/#markup-a-form", 
            "text": "1\n2\n3\n4\n5\n6\n7\n8 form   name = contact_form   method = post \n     input   name = name   type = text \n     input   name = email   type = text \n     textarea   name = msg / textarea \n\n     ?php $form- token_fields(); ? \n     input   type = submit   value = Submit  / form", 
            "title": "Markup a Form"
        }, 
        {
            "location": "/guide/rules/", 
            "text": "Define\n\n\nRules are defined in a field's rules attribute in the config array:\n\n1\n2\n3\n4\n5\n6\n7\n8\n?php\n\n\n\narray\n(\n\n    \nfirst_name\n \n=\n \n[\n\n        \nlabel\n \n=\n \nFirst Name\n,\n\n        \nrules\n \n=\n \nrequired|alpha_dash\n\n    \n]\n\n\n);\n\n\n\n\n\n\nThe \nfield_name\n corresponds to the \nname\n attribute of a field:\n\n1\ninput\n \nname\n=\nfirst_name\n \ntype\n=\ntext\n\n\n\n\n\n\n\n\nOptional Fields\n\n\nUnless a field is specified as optional, it must pass all the defined validation rules.\n\n\nFor example, in this config, an empty email field would NOT be a valid email and would fail validation:\n\n1\n2\n3\n4\n5\n6\n7\n8\n?php\n\n\n\narray\n(\n\n    \nemail\n \n=\n \n[\n\n        \nlabel\n \n=\n \nEmail\n,\n\n        \nrules\n \n=\n \nemail\n\n    \n]\n\n\n);\n\n\n\n\n\n\nTo make the field optional, so that it validates when empty, add the \noptional\n rule:\n\n1\n2\n3\n4\n5\n6\n7\n8\n?php\n\n\n\narray\n(\n\n    \nemail\n \n=\n \n[\n\n        \nlabel\n \n=\n \nEmail\n,\n\n        \nrules\n \n=\n \noptional|email\n\n    \n]\n\n\n);\n\n\n\n\n\nIn this case, validation will only verify the rules for the field if it is not empty.\n\n\n\n\nBuilt-in\n\n\nalpha\n\n\nInput value must only contain alphabetic characters.\n\n\nalpha\n\n\n\n\nalpha_dash\n\n\nInput value must only contain alphabetic characters, dashes, and underscores.\n\n\nalpha_dash\n\n\n\n\nalpha_num\n\n\nInput value must only contain alphabetic and numeric characters.\n\n\nalpha_num\n\n\n\n\narray_type\n\n\nInput value must be a PHP array.\n\n\narray_type\n\n\n\n\nbetween\n\n\nInput value must be between a range.\n\n\nAccepted ranges:\n\n\n\n\nNumeric \nbetween:10,20\n\n\nAlphabetic \nbetween:a,f\n\n\nDate \nbetween:2010-01-01,2017-01-01\n\n\nstrtotime \nbetween:yesterday,tomorrow\n\n\n\n\nbetween:\nstart\n,\nend\n\n\n\n\nboolean\n\n\nInput value must be a boolean.\n\n\nAccepted values:\n\n\n\n\ntrue\n\n\nfalse\n\n\ntrue\n\n\nfalse\n\n\n0\n\n\n1\n\n\n0\n\n\n1\n\n\non\n\n\noff\n\n\nyes\n\n\nno\n\n\n\n\nboolean\n\n\n\n\ncallback\n\n\nValidate the input value using a callback.\n\n\nThe callback must return boolean.\n\n\ncallback:some_function\n\n\n1\n2\n3\n4\n5\n?php\n\n\n\nfunction\n \nsome_function\n(\n \n$input\n \n)\n \n{\n\n    \nreturn\n \n(\n \nwhatever\n \n===\n \n$input\n \n)\n \n?\n \ntrue\n \n:\n \nfalse\n;\n\n\n}\n\n\n\n\n\n\n\n\ndate\n\n\nInput value must be a date.\n\n\nAccepted values:\n\n\n\n\nvalid \nstrtotime\n\n\ninstanceof DateTimeInterface\n\n\ninstanceof DateTime\n\n\n\n\ndate\n\n\nYou can also specify a format using \ndate format characters\n,\neg:\ndate:Y-m-d\n\n\n\n\ndifferent\n\n\ndifferent\n\n\n\n\ndigit\n\n\nInput value must be a \ndigit\n\n\nAccepts only \n0\n through \n9\n\n\ndigit\n\n\n\n\nemail\n\n\nInput value must be formatted like an email address.\n\n\nemail\n\n\n\n\nequals\n\n\nInput value must be equal to given value.\n\n\nequals:value\n\n\n\n\ninteger\n\n\nInput value must be an integer.\n\n\nAccepts only positive/negative whole numbers.\n\n\ninteger\n\n\n\n\nip\n\n\nInput value must be an IP address.\n\n\nip\n\n\n\n\nmax\n\n\nInput must not exceed the maximum value.\n\n\nNumeric:\n\nmax:20\n 15 pass, 25 fail\n\n\nAlphabetic:\n\nmax:c\n a pass, d fail\n\n\nDate:\n\nmax:2017-06-30\n 2017-06-29 pass, 2017-07-29 fail\n\n\n\n\nmin\n\n\nmin:5\n\n\n\n\nnumeric\n\n\nInput value must be numeric.\n\n\nnumeric\n\n\n\n\noptional\n\n\nThe field is optional. Any other defined rules will only be validated if field is not empty.\n\n\noptional\n\n\n\n\nrequired\n\n\nThe field is required and must not be empty.\n\n\nrequired\n\n\n\n\nrequired_if\n\n\nThe field is required only if another field has a specific value.\n\n\nrequired_if:other_field,value\n\n\n\n\nrequired_with\n\n\nThe field is required only if another field is not empty.\n\n\nrequired_with:other_field\n\n\n\n\nCustom\n\n\nCustom rules can be defined and validated with a callback function.\n\n\nDefine:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n?php\n\n\n\n$my_form\n \n=\n \narray\n(\n\n    \nphone\n \n=\n \n[\n\n        \nlabel\n \n=\n \nPhone\n,\n\n        \nrules\n \n=\n \nrequired|callback:wfv__phone\n\n    \n],\n\n\n);\n\n\n\n\n\n\nCallback:\n\n\nCreate a callback that evaluates to true or false:\n\n1\n2\n3\n4\n5\n6\n?php\n\n\n// phone field will validate only if the input is \nhi\n ...how cruel\n\n\n\nfunction\n \nwfv__phone\n(\n \n$value\n \n)\n \n{\n\n    \nreturn\n \n(\n \nhi\n \n===\n \n$value\n \n)\n \n?\n \ntrue\n \n:\n \nfalse\n;\n\n\n}\n\n\n\n\n\n\n\n\nNote\n\n\nTo prevent name collisions, it is advised to prefix the function name and/or wrap the function in a \nfunction_exists()\n conditional.", 
            "title": "Rules"
        }, 
        {
            "location": "/guide/rules/#define", 
            "text": "Rules are defined in a field's rules attribute in the config array: 1\n2\n3\n4\n5\n6\n7\n8 ?php  array ( \n     first_name   =   [ \n         label   =   First Name , \n         rules   =   required|alpha_dash \n     ]  );    The  field_name  corresponds to the  name  attribute of a field: 1 input   name = first_name   type = text", 
            "title": "Define"
        }, 
        {
            "location": "/guide/rules/#optional-fields", 
            "text": "Unless a field is specified as optional, it must pass all the defined validation rules.  For example, in this config, an empty email field would NOT be a valid email and would fail validation: 1\n2\n3\n4\n5\n6\n7\n8 ?php  array ( \n     email   =   [ \n         label   =   Email , \n         rules   =   email \n     ]  );    To make the field optional, so that it validates when empty, add the  optional  rule: 1\n2\n3\n4\n5\n6\n7\n8 ?php  array ( \n     email   =   [ \n         label   =   Email , \n         rules   =   optional|email \n     ]  );   \nIn this case, validation will only verify the rules for the field if it is not empty.", 
            "title": "Optional Fields"
        }, 
        {
            "location": "/guide/rules/#built-in", 
            "text": "", 
            "title": "Built-in"
        }, 
        {
            "location": "/guide/rules/#alpha", 
            "text": "Input value must only contain alphabetic characters.  alpha", 
            "title": "alpha"
        }, 
        {
            "location": "/guide/rules/#alpha_dash", 
            "text": "Input value must only contain alphabetic characters, dashes, and underscores.  alpha_dash", 
            "title": "alpha_dash"
        }, 
        {
            "location": "/guide/rules/#alpha_num", 
            "text": "Input value must only contain alphabetic and numeric characters.  alpha_num", 
            "title": "alpha_num"
        }, 
        {
            "location": "/guide/rules/#array_type", 
            "text": "Input value must be a PHP array.  array_type", 
            "title": "array_type"
        }, 
        {
            "location": "/guide/rules/#between", 
            "text": "Input value must be between a range.  Accepted ranges:   Numeric  between:10,20  Alphabetic  between:a,f  Date  between:2010-01-01,2017-01-01  strtotime  between:yesterday,tomorrow   between: start , end", 
            "title": "between"
        }, 
        {
            "location": "/guide/rules/#boolean", 
            "text": "Input value must be a boolean.  Accepted values:   true  false  true  false  0  1  0  1  on  off  yes  no   boolean", 
            "title": "boolean"
        }, 
        {
            "location": "/guide/rules/#callback", 
            "text": "Validate the input value using a callback.  The callback must return boolean.  callback:some_function  1\n2\n3\n4\n5 ?php  function   some_function (   $input   )   { \n     return   (   whatever   ===   $input   )   ?   true   :   false ;  }", 
            "title": "callback"
        }, 
        {
            "location": "/guide/rules/#date", 
            "text": "Input value must be a date.  Accepted values:   valid  strtotime  instanceof DateTimeInterface  instanceof DateTime   date  You can also specify a format using  date format characters ,\neg: date:Y-m-d", 
            "title": "date"
        }, 
        {
            "location": "/guide/rules/#different", 
            "text": "different", 
            "title": "different"
        }, 
        {
            "location": "/guide/rules/#digit", 
            "text": "Input value must be a  digit  Accepts only  0  through  9  digit", 
            "title": "digit"
        }, 
        {
            "location": "/guide/rules/#email", 
            "text": "Input value must be formatted like an email address.  email", 
            "title": "email"
        }, 
        {
            "location": "/guide/rules/#equals", 
            "text": "Input value must be equal to given value.  equals:value", 
            "title": "equals"
        }, 
        {
            "location": "/guide/rules/#integer", 
            "text": "Input value must be an integer.  Accepts only positive/negative whole numbers.  integer", 
            "title": "integer"
        }, 
        {
            "location": "/guide/rules/#ip", 
            "text": "Input value must be an IP address.  ip", 
            "title": "ip"
        }, 
        {
            "location": "/guide/rules/#max", 
            "text": "Input must not exceed the maximum value.  Numeric: max:20  15 pass, 25 fail  Alphabetic: max:c  a pass, d fail  Date: max:2017-06-30  2017-06-29 pass, 2017-07-29 fail", 
            "title": "max"
        }, 
        {
            "location": "/guide/rules/#min", 
            "text": "min:5", 
            "title": "min"
        }, 
        {
            "location": "/guide/rules/#numeric", 
            "text": "Input value must be numeric.  numeric", 
            "title": "numeric"
        }, 
        {
            "location": "/guide/rules/#optional", 
            "text": "The field is optional. Any other defined rules will only be validated if field is not empty.  optional", 
            "title": "optional"
        }, 
        {
            "location": "/guide/rules/#required", 
            "text": "The field is required and must not be empty.  required", 
            "title": "required"
        }, 
        {
            "location": "/guide/rules/#required_if", 
            "text": "The field is required only if another field has a specific value.  required_if:other_field,value", 
            "title": "required_if"
        }, 
        {
            "location": "/guide/rules/#required_with", 
            "text": "The field is required only if another field is not empty.  required_with:other_field", 
            "title": "required_with"
        }, 
        {
            "location": "/guide/rules/#custom", 
            "text": "Custom rules can be defined and validated with a callback function.  Define:  1\n2\n3\n4\n5\n6\n7\n8 ?php  $my_form   =   array ( \n     phone   =   [ \n         label   =   Phone , \n         rules   =   required|callback:wfv__phone \n     ],  );    Callback:  Create a callback that evaluates to true or false: 1\n2\n3\n4\n5\n6 ?php  // phone field will validate only if the input is  hi  ...how cruel  function   wfv__phone (   $value   )   { \n     return   (   hi   ===   $value   )   ?   true   :   false ;  }     Note  To prevent name collisions, it is advised to prefix the function name and/or wrap the function in a  function_exists()  conditional.", 
            "title": "Custom"
        }, 
        {
            "location": "/guide/messages/", 
            "text": "Configure", 
            "title": "Messages"
        }, 
        {
            "location": "/guide/messages/#configure", 
            "text": "", 
            "title": "Configure"
        }, 
        {
            "location": "/guide/hooks/", 
            "text": "Validation will trigger either a pass or fail action. Hook into them using standard WordPress \nadd_action()\n and process any logic in a callback.\n\n\n\n\nNote\n\n\nActions are named using the alias provided when the instance was created:\n\n\nwfv_create\n(\n \ncontact_form\n,\n \n$form\n \n);\n\n\nPass\n:\n \ncontact_form\n\n\nFail\n:\n \ncontact_form_fail\n\n\n\n\nThe \nFormComposite\n instance is automatically passed into the callback. Ensure that the first parameter is reserved for this.\n\n\nPass\n\n\n1\n2\n3\n4\n5\n6\n?php\n \n// action hook and callback for validation pass\n\n\n\nadd_action\n(\n \ncontact_form\n,\n \ncontact_form_valid\n \n);\n\n\nfunction\n \ncontact_form_valid\n(\n \n$form\n \n)\n \n{\n\n  \n// form input valid, do something...\n\n\n}\n\n\n\n\n\n\n\nFail\n\n\n1\n2\n3\n4\n5\n6\n?php\n \n// action hook and callback for validation fail\n\n\n\nadd_action\n(\n \ncontact_form_fail\n,\n \ncontact_form_invalid\n \n);\n\n\nfunction\n \ncontact_form_invalid\n(\n \n$form\n \n)\n \n{\n\n  \n// form input NOT valid, do something...\n\n\n}", 
            "title": "Hooks"
        }, 
        {
            "location": "/guide/hooks/#pass", 
            "text": "1\n2\n3\n4\n5\n6 ?php   // action hook and callback for validation pass  add_action (   contact_form ,   contact_form_valid   );  function   contact_form_valid (   $form   )   { \n   // form input valid, do something...  }", 
            "title": "Pass"
        }, 
        {
            "location": "/guide/hooks/#fail", 
            "text": "1\n2\n3\n4\n5\n6 ?php   // action hook and callback for validation fail  add_action (   contact_form_fail ,   contact_form_invalid   );  function   contact_form_invalid (   $form   )   { \n   // form input NOT valid, do something...  }", 
            "title": "Fail"
        }, 
        {
            "location": "/guide/create/", 
            "text": "wfv_create\n\n\nThis method will pass by reference an instance of \nFormComposite\n as described by the $array arguments.\n\n\nYou must call this method to actualize a validation. It takes the boring array of arguments and gives you a rich composite.\n\n1\nwfv_create\n(\n \nstring\n \n$action\n,\n \narray\n \n$form\n \n)\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n$action\n\n\nstring\n\n\n\n\n\n\n\n\n\n\n$form\n\n\narray\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\nWhen using validation hooks, this method must be called after they have been registered.\n\n\nPlace \nwfv_create()\n below the hooks.\n\n\n\n\n1\n2\n?php\n\n\nwfv_create\n(\n \ncontact_form\n,\n \n$form\n \n);\n\n\n\n\n\n\n$form\n is now an instance of \nWFV\\FormComposite", 
            "title": "Create"
        }, 
        {
            "location": "/guide/create/#wfv_create", 
            "text": "This method will pass by reference an instance of  FormComposite  as described by the $array arguments.  You must call this method to actualize a validation. It takes the boring array of arguments and gives you a rich composite. 1 wfv_create (   string   $action ,   array   $form   )       Parameter  Type  Default  Description      $action  string      $form  array        Warning  When using validation hooks, this method must be called after they have been registered.  Place  wfv_create()  below the hooks.   1\n2 ?php  wfv_create (   contact_form ,   $form   );    $form  is now an instance of  WFV\\FormComposite", 
            "title": "wfv_create"
        }, 
        {
            "location": "/guide/populate/", 
            "text": "Text Fields\n\n\nIf validation fails, these fields would populate using the submitted values:\n\n1\ninput\n \nname\n=\nname\n \ntype\n=\ntext\n \nvalue\n=\n?php $form-\ndisplay(\nname\n); ?\n\n\n\n\n\n\n1\ntextarea\n \nname\n=\nmsg\n?php $form-\ndisplay(\nmsg\n); ?\n/\ntextarea\n\n\n\n\n\n\n\nMore options using \ndisplay()\n\n\n\n\nCheckboxes and Radio\n\n\nConvenience method to repopulate checkbox input\n\n1\nchecked_if\n(\n \nstring\n \n$field\n,\n \nstring\n \n$value\n \n)\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n$field\n\n\nstring\n\n\nnull\n\n\n\n\n\n\n\n\n$value\n\n\nstring\n\n\nnull\n\n\n\n\n\n\n\n\n@return\n \nstring\n|\nnull\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples:\n\n1\n2\n3\n?php\n \n// will echo \nchecked\n if user checked \ngreen\n checkbox\n\n\n\necho\n \n$form\n-\nchecked_if\n(\ncolor\n,\n \ngreen\n);\n \n// checked\n\n\n\n\n\n\nCheckbox:\n\n1\n2\n3\n4\n5\n6\ninput\n\n  \nname\n=\ncolor[]\n\n  \ntype\n=\ncheckbox\n\n  \nvalue\n=\ngreen\n\n  \n?=\n \n$\nform-\nchecked_if(\ncolor\n, \ngreen\n); ?\n\n\n\n\n\n\n\n\nRadio:\n\n1\n2\n3\n4\n5\n6\ninput\n\n  \nname\n=\nagree\n\n  \ntype\n=\nradio\n\n  \nvalue\n=\nyes\n\n  \n?=\n \n$\nform-\nchecked_if(\nagree\n, \nyes\n); ?\n\n\n\n\n\n\n\n\n\n\nSelect and Multi-select\n\n\nConvenience method to repopulate select input\n\n1\nselected_if\n(\n \nstring\n \n$field\n,\n \nstring\n \n$value\n \n)\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n$field\n\n\nstring\n\n\nnull\n\n\n\n\n\n\n\n\n$value\n\n\nstring\n\n\nnull\n\n\n\n\n\n\n\n\n@return\n \nstring\n|\nnull\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples:\n\n1\n2\n3\n?php\n \n// will echo \nselected\n if user selected \ngreen\n in select input\n\n\n\necho\n \n$my_form\n-\nselected_if\n(\ncolor\n,\n \ngreen\n);\n \n// selected\n\n\n\n\n\n\nSelect:\n\n1\n2\n3\n4\n5\n6\n7\nselect\n \nname\n=\ntitle\n\n  \noption\n \nvalue\n=\nSelect...\n/\noption\n\n  \noption\n \nvalue\n=\nMr\n \n?=\n \n$\nform-\nselected_if(\ntitle\n, \nMr\n); ?\nMr\n/\noption\n\n  \noption\n \nvalue\n=\nDr\n \n?=\n \n$\nform-\nselected_if(\ntitle\n, \nDr\n); ?\nDr\n/\noption\n\n  \noption\n \nvalue\n=\nMiss\n \n?=\n \n$\nform-\nselected_if(\ntitle\n, \nMiss\n); ?\nMiss\n/\noption\n\n  \noption\n \nvalue\n=\nMrs\n \n?=\n \n$\nform-\nselected_if(\ntitle\n, \nMrs\n); ?\nMrs\n/\noption\n\n\n/\nselect\n\n\n\n\n\n\nMulti-select:\n\n1\n2\n3\n4\n5\nselect\n \nname\n=\ncolor[]\n \nmultiple\n\n  \noption\n \nvalue\n=\nred\n?=\n \n$\nform-\nselected_if(\ncolor\n, \nred\n); ?\nRed\n/\noption\n\n  \noption\n \nvalue\n=\nblue\n?=\n \n$\nform-\nselected_if(\ncolor\n, \nblue\n); ?\nBlue\n/\noption\n\n  \noption\n \nvalue\n=\ngreen\n?=\n \n$\nform-\nselected_if(\ncolor\n, \ngreen\n); ?\nGreen\n/\noption\n\n\n/\nselect", 
            "title": "Populate"
        }, 
        {
            "location": "/guide/populate/#text-fields", 
            "text": "If validation fails, these fields would populate using the submitted values: 1 input   name = name   type = text   value = ?php $form- display( name ); ?    1 textarea   name = msg ?php $form- display( msg ); ? / textarea    More options using  display()", 
            "title": "Text Fields"
        }, 
        {
            "location": "/guide/populate/#checkboxes-and-radio", 
            "text": "Convenience method to repopulate checkbox input 1 checked_if (   string   $field ,   string   $value   )       Parameter  Type  Default  Description      $field  string  null     $value  string  null     @return   string | null        Examples: 1\n2\n3 ?php   // will echo  checked  if user checked  green  checkbox  echo   $form - checked_if ( color ,   green );   // checked    Checkbox: 1\n2\n3\n4\n5\n6 input \n   name = color[] \n   type = checkbox \n   value = green \n   ?=   $ form- checked_if( color ,  green ); ?     Radio: 1\n2\n3\n4\n5\n6 input \n   name = agree \n   type = radio \n   value = yes \n   ?=   $ form- checked_if( agree ,  yes ); ?", 
            "title": "Checkboxes and Radio"
        }, 
        {
            "location": "/guide/populate/#select-and-multi-select", 
            "text": "Convenience method to repopulate select input 1 selected_if (   string   $field ,   string   $value   )       Parameter  Type  Default  Description      $field  string  null     $value  string  null     @return   string | null        Examples: 1\n2\n3 ?php   // will echo  selected  if user selected  green  in select input  echo   $my_form - selected_if ( color ,   green );   // selected    Select: 1\n2\n3\n4\n5\n6\n7 select   name = title \n   option   value = Select... / option \n   option   value = Mr   ?=   $ form- selected_if( title ,  Mr ); ? Mr / option \n   option   value = Dr   ?=   $ form- selected_if( title ,  Dr ); ? Dr / option \n   option   value = Miss   ?=   $ form- selected_if( title ,  Miss ); ? Miss / option \n   option   value = Mrs   ?=   $ form- selected_if( title ,  Mrs ); ? Mrs / option  / select    Multi-select: 1\n2\n3\n4\n5 select   name = color[]   multiple \n   option   value = red ?=   $ form- selected_if( color ,  red ); ? Red / option \n   option   value = blue ?=   $ form- selected_if( color ,  blue ); ? Blue / option \n   option   value = green ?=   $ form- selected_if( color ,  green ); ? Green / option  / select", 
            "title": "Select and Multi-select"
        }, 
        {
            "location": "/guide/input/", 
            "text": "Methods\n\n\ncontains()\n\n\nCheck if the collection contains a key / value pair\n\n1\ncontains\n \n(\n \n$key\n \n=\n \nnull\n,\n \n$value\n \n=\n \nnull\n \n)\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n$key\n\n\nstring\n\n\nnull\n\n\nKey\n\n\n\n\n\n\n$value\n\n\nstring\n\n\nnull\n\n\nValue to look for\n\n\n\n\n\n\n@return\n \nbool\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples\n\n\nBasic:\n\n1\n2\n3\n4\n5\n6\n?php\n\n\n\n$input\n \n=\n \n$form\n-\ninput\n();\n\n\n\n$input\n-\ncontains\n(\n \nemail\n,\n \nfoo@bar.com\n);\n  \n// true\n\n\n$input\n-\ncontains\n(\n \nemail\n,\n \nbar@foo.com\n);\n  \n// false\n\n\n\n\n\n\nConditional:\n\n1\n2\n3\n4\n5\n6\n7\n?php\n\n\n\n$input\n \n=\n \n$form\n-\ninput\n();\n\n\n\nif\n \n(\n \n$input\n-\ncontains\n(\n \nemail\n,\n \nfoo@bar.com\n)\n \n)\n \n{\n\n    \n// ...do something\n\n\n}\n\n\n\n\n\n\n\n\ndisplay()\n\n\nDisplays (echo) an encoded input value.\n\n\nIf you need to assign the value, use \nescape()\n instead.\n\n1\ndisplay\n(\n \n$field\n \n=\n \nnull\n,\n \ncallable\n \n$callback\n \n=\n \nnull\n \n)\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n$field\n\n\nstring\n\n\nnull\n\n\n\n\n\n\n\n\n$callback\n\n\ncallable\n\n\nesc_html\n()\n\n\n\n\n\n\n\n\n@return\n \nstring\n|\nnull\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples\n\n\nBasic:\n\n1\n2\n3\n?php\n \n// eg. user entered \nh1\nBar\n/h1\n\n\n\n$form\n-\ndisplay\n(\nname\n);\n\n\n\n\n\nThe output: \nh1\nBar\n/h1\n\n\n\n\nNote\n\n\nThe default callback is \nesc_html()\n when none is provided.\n\n\n\n\nCallback:\n\n1\n2\n3\n?php\n \n// eg. user entered \nh1\nBar\n/h1\n\n\n\n$form\n-\ndisplay\n(\nname\n,\n \nstrip_tags\n);\n \n// Bar\n\n\n\n\n\n\n\n\nTip\n\n\nThe callable can be a string reference to a function or a closure.\n\n\n\n\n\n\nescape()\n\n\nAssign an escaped input value.\n\n\n1\nescape\n(\n \n$key\n,\n \ncallable\n \n$callback\n \n=\n \nnull\n \n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n$key\n\n\nstring\n\n\n\n\nKey containing the string\n\n\n\n\n\n\n$callback\n\n\ncallable\n\n\nesc_html\n()\n\n\nCallback to pass string\n\n\n\n\n\n\n@return\n \nstring\n|\nnull\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples\n\n\nBasic:\n\n1\n2\n3\n4\n?php\n \n// eg. user entered \nh1\nBar\n/h1\n\n\n\n// no echo\n\n\n$name\n \n=\n \n$form\n-\ninput\n()\n-\nescape\n(\nname\n);\n  \n// \nlt;h1\ngt;Bar\nlt;/h1\ngt;\n\n\n\n\n\n\nCallback:\n\n1\n2\n3\n?php\n \n// eg. user entered \nh1\nBar\n/h1\n\n\n\n$name\n \n=\n \n$form\n-\ninput\n()\n-\nescape\n(\nname\n,\n \nstrip_tags\n);\n  \n// Bar\n\n\n\n\n\n\n\n\nNote\n\n\nMake sure to use a callable that is appropriate to the output context.\n\n\n\n\nCustom callback:\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n?php\n \n// over-engineered string concatenation\n\n\n\nfunction\n \nadd_lorem\n(\n \n$string\n \n)\n \n{\n\n  \nreturn\n \n$string\n \n.\n_lorem\n;\n\n\n}\n\n\n\n$new_name\n \n=\n \n$form\n-\ninput\n()\n-\nescape\n(\nname\n,\n \nadd_lorem\n);\n\n\n\n// Bar_lorem\n\n\n\n\n\n\nClosure:\n\n1\n2\n3\n4\n5\n6\n7\n?php\n\n\n\n$new_name\n \n=\n \n$form\n-\ninput\n()\n-\nescape\n(\nname\n,\n \nfunction\n(\n \n$string\n \n){\n\n  \nreturn\n \n$string\n \n.\n_lorem\n;\n\n\n});\n\n\n\n// Bar_lorem\n\n\n\n\n\n\nCallback with multiple parameters:\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n?php\n \n// even more over-engineered string concatenation\n\n\n\nfunction\n \nwfv_example\n(\n \n$value\n,\n \n$arg2\n,\n \n$arg3\n \n)\n \n{\n\n  \nreturn\n \n$arg2\n \n.\n-\n.\n \n$value\n \n.\n-\n.\n \n$arg3\n;\n\n\n}\n\n\n\n$callback\n \n=\n \narray\n(\n \nwfv_example\n,\n \narray\n(\n \nsecond\n,\n \nthird\n \n)\n \n);\n\n\n\n$new_email\n \n=\n \n$form\n-\ninput\n()\n-\nescape\n(\n \nemail\n,\n \n$callback\n \n);\n\n\n\n// second-foo@bar.com-third\n\n\n\n\n\n\n\n\nhas()\n\n\nCheck if the collection has a given key\n\n1\nhas\n \n(\n \n$key\n \n=\n \nnull\n \n)\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n$key\n\n\nstring\n\n\nnull\n\n\nKey to check existence\n\n\n\n\n\n\n@return\n \nbool\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples\n\n\nBasic:\n\n1\n2\n3\n?php\n\n\n\n$form\n-\ninput\n()\n-\nhas\n(\nemail\n);\n  \n// true\n\n\n\n\n\n\nConditional:\n\n1\n2\n3\n4\n5\n6\n7\n?php\n\n\n\n$input\n \n=\n \n$form\n-\ninput\n();\n\n\n\nif\n \n(\n \n$input\n-\nhas\n(\nemail\n)\n \n)\n \n{\n\n    \n// ...do something\n\n\n}\n\n\n\n\n\n\n\n\nis_populated()\n\n\nChecks if the collection has data.\n\n1\nis_populated\n()\n\n\n\n\n\n\n@return\n \nbool", 
            "title": "Input"
        }, 
        {
            "location": "/guide/input/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/guide/input/#contains", 
            "text": "Check if the collection contains a key / value pair 1 contains   (   $key   =   null ,   $value   =   null   )       Parameter  Type  Default  Description      $key  string  null  Key    $value  string  null  Value to look for    @return   bool        Examples  Basic: 1\n2\n3\n4\n5\n6 ?php  $input   =   $form - input ();  $input - contains (   email ,   foo@bar.com );    // true  $input - contains (   email ,   bar@foo.com );    // false    Conditional: 1\n2\n3\n4\n5\n6\n7 ?php  $input   =   $form - input ();  if   (   $input - contains (   email ,   foo@bar.com )   )   { \n     // ...do something  }", 
            "title": "contains()"
        }, 
        {
            "location": "/guide/input/#display", 
            "text": "Displays (echo) an encoded input value.  If you need to assign the value, use  escape()  instead. 1 display (   $field   =   null ,   callable   $callback   =   null   )       Parameter  Type  Default  Description      $field  string  null     $callback  callable  esc_html ()     @return   string | null        Examples  Basic: 1\n2\n3 ?php   // eg. user entered  h1 Bar /h1  $form - display ( name );   \nThe output:  h1 Bar /h1   Note  The default callback is  esc_html()  when none is provided.   Callback: 1\n2\n3 ?php   // eg. user entered  h1 Bar /h1  $form - display ( name ,   strip_tags );   // Bar     Tip  The callable can be a string reference to a function or a closure.", 
            "title": "display()"
        }, 
        {
            "location": "/guide/input/#escape", 
            "text": "Assign an escaped input value.  1 escape (   $key ,   callable   $callback   =   null   )       Parameter  Type  Default  Description      $key  string   Key containing the string    $callback  callable  esc_html ()  Callback to pass string    @return   string | null        Examples  Basic: 1\n2\n3\n4 ?php   // eg. user entered  h1 Bar /h1  // no echo  $name   =   $form - input () - escape ( name );    //  lt;h1 gt;Bar lt;/h1 gt;    Callback: 1\n2\n3 ?php   // eg. user entered  h1 Bar /h1  $name   =   $form - input () - escape ( name ,   strip_tags );    // Bar     Note  Make sure to use a callable that is appropriate to the output context.   Custom callback: 1\n2\n3\n4\n5\n6\n7\n8\n9 ?php   // over-engineered string concatenation  function   add_lorem (   $string   )   { \n   return   $string   . _lorem ;  }  $new_name   =   $form - input () - escape ( name ,   add_lorem );  // Bar_lorem    Closure: 1\n2\n3\n4\n5\n6\n7 ?php  $new_name   =   $form - input () - escape ( name ,   function (   $string   ){ \n   return   $string   . _lorem ;  });  // Bar_lorem    Callback with multiple parameters:  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 ?php   // even more over-engineered string concatenation  function   wfv_example (   $value ,   $arg2 ,   $arg3   )   { \n   return   $arg2   . - .   $value   . - .   $arg3 ;  }  $callback   =   array (   wfv_example ,   array (   second ,   third   )   );  $new_email   =   $form - input () - escape (   email ,   $callback   );  // second-foo@bar.com-third", 
            "title": "escape()"
        }, 
        {
            "location": "/guide/input/#has", 
            "text": "Check if the collection has a given key 1 has   (   $key   =   null   )       Parameter  Type  Default  Description      $key  string  null  Key to check existence    @return   bool        Examples  Basic: 1\n2\n3 ?php  $form - input () - has ( email );    // true    Conditional: 1\n2\n3\n4\n5\n6\n7 ?php  $input   =   $form - input ();  if   (   $input - has ( email )   )   { \n     // ...do something  }", 
            "title": "has()"
        }, 
        {
            "location": "/guide/input/#is_populated", 
            "text": "Checks if the collection has data. 1 is_populated ()    @return   bool", 
            "title": "is_populated()"
        }, 
        {
            "location": "/guide/errors/", 
            "text": "Methods\n\n\nhas()\n\n\nCheck if a field has a validation error. This can be useful to display error states.\n\n1\nhas\n \n(\n \n$field\n \n=\n \nnull\n \n)\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n$field\n\n\nstring\n\n\nnull\n\n\nName of the field\n\n\n\n\n\n\n@return\n \nbool\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples\n\n\nBasic:\n\n1\n2\n3\n?php\n\n\n\n$form\n-\nerrors\n()\n-\nhas\n(\nemail\n);\n\n\n\n\n\n\nConditional:\n\n1\n2\n3\n4\n5\n6\n7\n?php\n\n\n$errors = $form-\nerrors();\n\n\n?\n\n\n\ndiv\n \nclass\n=\n?php echo ( $errors-\nhas(\nemail\n) ) ? \nerror\n : \n\n  \ninput\n \nname\n=\nemail\n \ntype\n=\ntext\n\n\n/\ndiv\n\n\n\n\n\n\n\n\nfirst()\n\n\nGet the first error message for a given field.\n\n\nThis is useful for displaying inline error messages.\n\n1\nfirst\n(\n \n$field\n \n)\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n$field\n\n\nstring\n\n\n\n\nName of the field\n\n\n\n\n\n\n@return\n \nstring\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples\n\n\nBasic:\n\n1\n2\n3\n?php\n\n\n\necho\n \n$form\n-\nerrors\n()\n-\nfirst\n(\nemail\n);\n\n\n\n\n\n\nIn a template:\n\n1\n2\n3\n4\ndiv\n\n  \ninput\n \nname\n=\nemail\n \ntype\n=\ntext\n\n  \nsmall\n \nclass\n=\nerror\n?php echo $form-\nerrors()-\nfirst(\nemail\n); ?\n/\nsmall\n\n\n/\ndiv", 
            "title": "Errors"
        }, 
        {
            "location": "/guide/errors/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/guide/errors/#has", 
            "text": "Check if a field has a validation error. This can be useful to display error states. 1 has   (   $field   =   null   )       Parameter  Type  Default  Description      $field  string  null  Name of the field    @return   bool        Examples  Basic: 1\n2\n3 ?php  $form - errors () - has ( email );    Conditional: 1\n2\n3\n4\n5\n6\n7 ?php  $errors = $form- errors();  ?  div   class = ?php echo ( $errors- has( email ) ) ?  error  :  \n   input   name = email   type = text  / div", 
            "title": "has()"
        }, 
        {
            "location": "/guide/errors/#first", 
            "text": "Get the first error message for a given field.  This is useful for displaying inline error messages. 1 first (   $field   )       Parameter  Type  Default  Description      $field  string   Name of the field    @return   string        Examples  Basic: 1\n2\n3 ?php  echo   $form - errors () - first ( email );    In a template: 1\n2\n3\n4 div \n   input   name = email   type = text \n   small   class = error ?php echo $form- errors()- first( email ); ? / small  / div", 
            "title": "first()"
        }, 
        {
            "location": "/examples/basic/", 
            "text": "Basic example\n\n\nfunctions.php\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n?php\n\n\n\n$my_form\n \n=\n \narray\n(\n\n  \nfirst_name\n \n=\n \n[\n\n    \nlabel\n \n=\n \nFirst name\n,\n\n    \nrules\n \n=\n \nrequired\n,\n\n  \n],\n\n  \nemail\n \n=\n \n[\n\n    \nlabel\n \n=\n \nEmail\n,\n\n    \nrules\n \n=\n \nrequired|email\n,\n\n  \n],\n\n\n);\n\n\n\nadd_action\n(\n \nmy_form\n,\n \nvalid_my_form\n \n);\n\n\nfunction\n \nvalid_my_form\n(\n \n$form\n \n)\n \n{\n\n    \n// Validation passed.\n\n    \necho\n \nThank you \n.\n \n$form\n-\ninput\n()\n-\nescape\n(\nfirst_name\n);\n\n\n}\n\n\n\nadd_action\n(\n \nmy_form_fail\n,\n \ninvalid_my_form\n \n);\n\n\nfunction\n \ninvalid_my_form\n(\n \n$form\n \n)\n \n{\n\n    \n// Validation failed.\n\n    \n// This is mainly for edge cases that require some code after a fail.\n\n    \n// Most cases will not need this hook.\n\n\n}\n\n\n\n// Turn $my_form into an instance of FormComposite\n\n\nwfv_create\n(\n \nmy_form\n,\n \n$my_form\n \n);\n\n\n\n// Don\nt believe the magic?\n\n\nprint_r\n(\n \n$my_form\n \n);\n\n\n\n\n\n\nTheme template\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nform\n \nmethod\n=\npost\n\n\n  \ninput\n \nname\n=\nfirst_name\n \ntype\n=\ntext\n \nvalue\n=\n?php $my_form-\ndisplay(\nfirst_name\n); ?\n\n  \nsmall\n?php echo $my_form-\nerrors()-\nfirst(\nfirst_name\n); ?\n/\nsmall\n\n\n  \ninput\n \nname\n=\nemail\n \ntype\n=\ntext\n \nvalue\n=\n?php $my_form-\ndisplay(\nemail\n); ?\n\n  \nsmall\n?php echo $my_form-\nerrors()-\nfirst(\nemail\n); ?\n/\nsmall\n\n\n  \n?php $my_form-\nget_token_fields(); ?\n\n  \ninput\n \ntype\n=\nsubmit\n \nvalue\n=\nSend\n\n\n\n/\nform", 
            "title": "Basic"
        }, 
        {
            "location": "/examples/basic/#basic-example", 
            "text": "functions.php   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31 ?php  $my_form   =   array ( \n   first_name   =   [ \n     label   =   First name , \n     rules   =   required , \n   ], \n   email   =   [ \n     label   =   Email , \n     rules   =   required|email , \n   ],  );  add_action (   my_form ,   valid_my_form   );  function   valid_my_form (   $form   )   { \n     // Validation passed. \n     echo   Thank you  .   $form - input () - escape ( first_name );  }  add_action (   my_form_fail ,   invalid_my_form   );  function   invalid_my_form (   $form   )   { \n     // Validation failed. \n     // This is mainly for edge cases that require some code after a fail. \n     // Most cases will not need this hook.  }  // Turn $my_form into an instance of FormComposite  wfv_create (   my_form ,   $my_form   );  // Don t believe the magic?  print_r (   $my_form   );    Theme template   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 form   method = post \n\n   input   name = first_name   type = text   value = ?php $my_form- display( first_name ); ? \n   small ?php echo $my_form- errors()- first( first_name ); ? / small \n\n   input   name = email   type = text   value = ?php $my_form- display( email ); ? \n   small ?php echo $my_form- errors()- first( email ); ? / small \n\n   ?php $my_form- get_token_fields(); ? \n   input   type = submit   value = Send  / form", 
            "title": "Basic example"
        }
    ]
}