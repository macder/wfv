{
    "docs": [
        {
            "location": "/", 
            "text": "WFV is an elegant way to work with custom forms in WordPress.\n\n\nA simple, fluid, and concise API to manage user input, validation, feedback, and safe output.\n\n\nLet's begin\n\n\n\n\nFeatures\n\n\n\n\n32 built-in rules\n\n\nCustom rules\n\n\nCustom error messages\n\n\nHelper methods for safe output\n\n\nAuto populate\n\n\nMultiple forms\n\n\nValidation Hooks\n\n\nSelf POST - no redirects, no GET vars, no sessions, no cookies\n\n\nLightweight - Only one dependency (WordPress aside)\n\n\nUnit tested core\n - More stable, quicker fixes, less bugs, more happy\n\n\nNo rendered markup\n\n\nDeveloper freedom", 
            "title": "Welcome"
        }, 
        {
            "location": "/#features", 
            "text": "32 built-in rules  Custom rules  Custom error messages  Helper methods for safe output  Auto populate  Multiple forms  Validation Hooks  Self POST - no redirects, no GET vars, no sessions, no cookies  Lightweight - Only one dependency (WordPress aside)  Unit tested core  - More stable, quicker fixes, less bugs, more happy  No rendered markup  Developer freedom", 
            "title": "Features"
        }, 
        {
            "location": "/overview/", 
            "text": "What\n\n\nWorking with custom forms in WordPress involves either using some rich WYSIWYG plugin, or writing custom code.\n\n\nNeither approach is wrong, but sometimes less overhead or no awkward code blocks is more ideal.\n\n\nSuppose you are creating a custom form and decide to follow the \nWordPress way\n as a best practice. You create an action that triggers after a http request to /wp-admin/admin-post.php. So far so good, but that form is posting to \nhttp://yoursite.com/wp-admin/admin-post.php\n\n\nWhy is this a problem?\n\n\nThe user is no longer on the form. To send them back (i.e a required field was missed), we need to do a HTTP redirect. At this point the \n$_POST\n with the input is gone... which would have been useful to repopulate the form. In order to persist the users input, it needs to be stored in GET, a session, or a cookie.\n\n\nNeither is elegant, and both are clunky.\n\n\nHow\n\n\nWFV gives you the ability to declare form validation constraints in way that is similar to many MVC frameworks.\n\n\nMarkup a form in a template and define its constraints in functions.php or a plugin.\n\n\nYou get a simple but powerful API that makes coding forms more pleasant.\n\n\n\n\nWFV is:\n\n\nSafe:\n\n\n1\n$form\n-\ninput\n()\n-\nrender\n(\nemail\n);\n\n\n\n\n\n\nAdaptable:\n\n\n1\n$form\n-\ninput\n()\n-\nrender\n(\nemail\n,\n \nstrip_tags\n)\n\n\n\n\n\n\nFlexible:\n\n\n1\n2\n3\n$form\n-\ninput\n()\n-\nrender\n(\nemail\n,\n \nfunction\n(\n \n$input\n \n)\n \n{\n\n  \nreturn\n \nstrip_tags\n(\n \n$input\n \n);\n\n\n});\n\n\n\n\n\n\nAware:\n\n\n1\n$form\n-\ninput\n()\n-\ncontains\n(\n \nemail\n,\n \nfoo@bar.com\n \n);\n\n\n\n\n\n\nHelpful:\n\n\n1\n$form\n-\nerrors\n-\nfirst\n(\nemail\n);\n\n\n\n\n\n\nPragmatic:\n\n\n1\n$form\n-\nselected_if\n(\ncolor\n,\n \ngreen\n);\n\n\n\n\n\n\nSimple:\n\n\n1\n$form\n-\ninput\n()\n-\nhas\n(\nemail\n);\n\n\n\n\n\n\nPowerful:\n\n\n1\n$form\n-\nconstrain\n()\n-\nvalidate\n();\n\n\n\n\n\n\nEnjoy.", 
            "title": "Overview"
        }, 
        {
            "location": "/overview/#what", 
            "text": "Working with custom forms in WordPress involves either using some rich WYSIWYG plugin, or writing custom code.  Neither approach is wrong, but sometimes less overhead or no awkward code blocks is more ideal.  Suppose you are creating a custom form and decide to follow the  WordPress way  as a best practice. You create an action that triggers after a http request to /wp-admin/admin-post.php. So far so good, but that form is posting to  http://yoursite.com/wp-admin/admin-post.php  Why is this a problem?  The user is no longer on the form. To send them back (i.e a required field was missed), we need to do a HTTP redirect. At this point the  $_POST  with the input is gone... which would have been useful to repopulate the form. In order to persist the users input, it needs to be stored in GET, a session, or a cookie.  Neither is elegant, and both are clunky.", 
            "title": "What"
        }, 
        {
            "location": "/overview/#how", 
            "text": "WFV gives you the ability to declare form validation constraints in way that is similar to many MVC frameworks.  Markup a form in a template and define its constraints in functions.php or a plugin.  You get a simple but powerful API that makes coding forms more pleasant.", 
            "title": "How"
        }, 
        {
            "location": "/overview/#wfv-is", 
            "text": "Safe:  1 $form - input () - render ( email );    Adaptable:  1 $form - input () - render ( email ,   strip_tags )    Flexible:  1\n2\n3 $form - input () - render ( email ,   function (   $input   )   { \n   return   strip_tags (   $input   );  });    Aware:  1 $form - input () - contains (   email ,   foo@bar.com   );    Helpful:  1 $form - errors - first ( email );    Pragmatic:  1 $form - selected_if ( color ,   green );    Simple:  1 $form - input () - has ( email );    Powerful:  1 $form - constrain () - validate ();    Enjoy.", 
            "title": "WFV is:"
        }, 
        {
            "location": "/install/", 
            "text": "Requirements\n\n\n\n\nMinimum\n\n\n\n\nWordPress 3.7\n\n\nPHP 5.4\n\n\n\n\n\n\n\n\nRecommended\n\n\n\n\nWordPress 4.7.x\n\n\nPHP 7.0\n\n\n\n\n\n\nPHP 7.0 only with WordPress 4.0+", 
            "title": "Installation"
        }, 
        {
            "location": "/install/#requirements", 
            "text": "Minimum   WordPress 3.7  PHP 5.4     Recommended   WordPress 4.7.x  PHP 7.0    PHP 7.0 only with WordPress 4.0+", 
            "title": "Requirements"
        }, 
        {
            "location": "/start/", 
            "text": "WFV takes in an array of arguments to create the object you will interact with.\n\n\nThis array will contain 2 arrays - rules, and messages.\n\n\nTypically, this is defined in a themes \nfunctions.php\n, but it can be anywhere.\n\n\n\n\nDefine Validation Rules\n\n\nThe rules array defines the validation rule(s) for each field\n\n1\n2\n3\n4\n5\n6\n?php\n\n\n\n$rules\n \n=\n \narray\n(\n\n  \nname\n \n=\n \n[\nrequired\n],\n\n  \nemail\n=\n \n[\nrequired\n,\n \nemail\n],\n\n\n)\n\n\n\n\n\nEach field holds an array of rules. You can use \nbuilt-in\n ones or \ncreate your own\n.\n\n\n\n\nOverride Messages\n\n\nThe messages array overrides an error message for a field's rule. This is optional, if no message is provided, the default will be used.\n\n1\n2\n3\n4\n5\n6\n7\n?php\n\n\n\n$messages\n \n=\n \narray\n(\n\n  \nemail\n \n=\n \n[\n\n    \nrequired\n \n=\n \nYour email is required so we can reply back\n\n  \n],\n\n\n)\n\n\n\n\n\n\n\n\nArgument Structure\n\n\nDefine your validation rules and message overrides together in an array structured like this:\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n?php\n\n\n\n$form\n \n=\n \narray\n(\n\n  \nrules\n  \n=\n \narray\n(\n\n    \nname\n \n=\n \n[\nrequired\n],\n\n    \nemail\n=\n \n[\nrequired\n,\n \nemail\n],\n\n  \n),\n\n\n  \nmessages\n \n=\n \narray\n(\n\n    \nemail\n \n=\n \n[\n\n      \nrequired\n \n=\n \nYour email is required so we can reply back\n\n    \n],\n\n  \n)\n\n\n);\n\n\n\n\n\n\n\n\nActivate\n\n\nPass the array of arguments into the \nwfv_create()\n function to get an instance of \nWFV\\FormComposite\n.\n\n\n\n\nValidation Callbacks\n\n\nWFV triggers an \naction\n for \npass\n or \nfail\n. Hook into them and handle any logic inside callbacks\n\n\n\n\nMarkup a Form\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nform\n \nname\n=\ncontact_form\n \nmethod\n=\npost\n\n  \ninput\n \nname\n=\nname\n \ntype\n=\ntext\n\n  \ninput\n \nname\n=\nemail\n \ntype\n=\ntext\n\n  \ntextarea\n \nname\n=\nmsg\n/\ntextarea\n\n\n  \n?php $my_form-\nget_token_fields(); ?\n\n  \ninput\n \ntype\n=\nsubmit\n \nvalue\n=\nSubmit\n\n\n/\nform", 
            "title": "Getting Started"
        }, 
        {
            "location": "/start/#define-validation-rules", 
            "text": "The rules array defines the validation rule(s) for each field 1\n2\n3\n4\n5\n6 ?php  $rules   =   array ( \n   name   =   [ required ], \n   email =   [ required ,   email ],  )   \nEach field holds an array of rules. You can use  built-in  ones or  create your own .", 
            "title": "Define Validation Rules"
        }, 
        {
            "location": "/start/#override-messages", 
            "text": "The messages array overrides an error message for a field's rule. This is optional, if no message is provided, the default will be used. 1\n2\n3\n4\n5\n6\n7 ?php  $messages   =   array ( \n   email   =   [ \n     required   =   Your email is required so we can reply back \n   ],  )", 
            "title": "Override Messages"
        }, 
        {
            "location": "/start/#argument-structure", 
            "text": "Define your validation rules and message overrides together in an array structured like this:  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 ?php  $form   =   array ( \n   rules    =   array ( \n     name   =   [ required ], \n     email =   [ required ,   email ], \n   ), \n\n   messages   =   array ( \n     email   =   [ \n       required   =   Your email is required so we can reply back \n     ], \n   )  );", 
            "title": "Argument Structure"
        }, 
        {
            "location": "/start/#activate", 
            "text": "Pass the array of arguments into the  wfv_create()  function to get an instance of  WFV\\FormComposite .", 
            "title": "Activate"
        }, 
        {
            "location": "/start/#validation-callbacks", 
            "text": "WFV triggers an  action  for  pass  or  fail . Hook into them and handle any logic inside callbacks", 
            "title": "Validation Callbacks"
        }, 
        {
            "location": "/start/#markup-a-form", 
            "text": "1\n2\n3\n4\n5\n6\n7\n8 form   name = contact_form   method = post \n   input   name = name   type = text \n   input   name = email   type = text \n   textarea   name = msg / textarea \n\n   ?php $my_form- get_token_fields(); ? \n   input   type = submit   value = Submit  / form", 
            "title": "Markup a Form"
        }, 
        {
            "location": "/guide/hooks/", 
            "text": "Validation will trigger either a pass or fail action. Hook into them using standard WordPress \nadd_action()\n and process any logic in a callback.\n\n\n\n\nNote\n\n\nActions are named using the alias provided when the instance was created:\n\n\nwfv_create\n(\n \ncontact_form\n,\n \n$form\n \n);\n\n\nPass\n:\n \ncontact_form\n\n\nFail\n:\n \ncontact_form_fail\n\n\n\n\nThe \nFormComposite\n instance is automatically passed into the callback. Ensure that the first parameter is reserved for this.\n\n\nPass\n\n\n1\n2\n3\n4\n5\n6\n?php\n \n// action hook and callback for validation pass\n\n\n\nadd_action\n(\n \ncontact_form\n,\n \ncontact_form_valid\n \n);\n\n\nfunction\n \ncontact_form_valid\n(\n \n$form\n \n)\n \n{\n\n  \n// form input valid, do something...\n\n\n}\n\n\n\n\n\n\n\nFail\n\n\n1\n2\n3\n4\n5\n6\n?php\n \n// action hook and callback for validation fail\n\n\n\nadd_action\n(\n \ncontact_form_fail\n,\n \ncontact_form_invalid\n \n);\n\n\nfunction\n \ncontact_form_invalid\n(\n \n$form\n \n)\n \n{\n\n  \n// form input NOT valid, do something...\n\n\n}", 
            "title": "Hooks"
        }, 
        {
            "location": "/guide/hooks/#pass", 
            "text": "1\n2\n3\n4\n5\n6 ?php   // action hook and callback for validation pass  add_action (   contact_form ,   contact_form_valid   );  function   contact_form_valid (   $form   )   { \n   // form input valid, do something...  }", 
            "title": "Pass"
        }, 
        {
            "location": "/guide/hooks/#fail", 
            "text": "1\n2\n3\n4\n5\n6 ?php   // action hook and callback for validation fail  add_action (   contact_form_fail ,   contact_form_invalid   );  function   contact_form_invalid (   $form   )   { \n   // form input NOT valid, do something...  }", 
            "title": "Fail"
        }, 
        {
            "location": "/guide/create/", 
            "text": "wfv_create\n\n\nThis method will pass by reference an instance of \nFormComposite\n as described by the $array arguments.\n\n\nYou must call this method to actualize a validation. It takes the boring array of arguments and gives you a rich composite.\n\n1\nwfv_create\n(\n \nstring\n \n$action\n,\n \narray\n \n$form\n \n)\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n$action\n\n\nstring\n\n\n\n\n\n\n\n\n\n\n$form\n\n\narray\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\nWhen using validation hooks, this method must be called after they have been registered.\n\n\nPlace \nwfv_create()\n below the hooks.\n\n\n\n\n1\n2\n?php\n\n\nwfv_create\n(\n \ncontact_form\n,\n \n$form\n \n);\n\n\n\n\n\n\n$form\n is now an instance of \nWFV\\FormComposite\n\n\n\n\nFormComposite", 
            "title": "Create"
        }, 
        {
            "location": "/guide/create/#wfv_create", 
            "text": "This method will pass by reference an instance of  FormComposite  as described by the $array arguments.  You must call this method to actualize a validation. It takes the boring array of arguments and gives you a rich composite. 1 wfv_create (   string   $action ,   array   $form   )       Parameter  Type  Default  Description      $action  string      $form  array        Warning  When using validation hooks, this method must be called after they have been registered.  Place  wfv_create()  below the hooks.   1\n2 ?php  wfv_create (   contact_form ,   $form   );    $form  is now an instance of  WFV\\FormComposite", 
            "title": "wfv_create"
        }, 
        {
            "location": "/guide/create/#formcomposite", 
            "text": "", 
            "title": "FormComposite"
        }, 
        {
            "location": "/guide/rules/", 
            "text": "Configure\n\n\n1\n2\n3\n4\n5\n6\n?php\n\n\n\n$rules\n \n=\n \narray\n(\n\n  \nname\n \n=\n \n[\nrequired\n],\n\n  \nemail\n=\n \n[\nrequired\n,\n \nemail\n],\n\n\n)\n\n\n\n\n\n\n\nBuilt-in Rules\n\n\n\n\n\n\n\n\nRule\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrequired\n\n\nRequired field\n\n\n\n\n\n\nequals\n\n\nField must equal value from another field (eg. new password confirm)\n\n\n\n\n\n\ndifferent\n\n\nField value must be different than another field\n\n\n\n\n\n\naccepted\n\n\nCheckbox or Radio must be accepted\n\n\n\n\n\n\nnumeric\n\n\nMust be numeric\n\n\n\n\n\n\ninteger\n\n\nMust be integer number\n\n\n\n\n\n\nboolean\n\n\nMust be bool\n\n\n\n\n\n\narray\n\n\nMust be array\n\n\n\n\n\n\nlength\n\n\nCharacter count must equal given length\n\n\n\n\n\n\nlengthBetween\n\n\nCharacter count must be within given lengths\n\n\n\n\n\n\nlengthMin\n\n\nCharacter count must be greater\n\n\n\n\n\n\nlengthMax\n\n\nCharacter count must be less\n\n\n\n\n\n\nmin\n\n\nMinimum\n\n\n\n\n\n\nmax\n\n\nMaximum\n\n\n\n\n\n\nin\n\n\nPerforms in_array check on given array values\n\n\n\n\n\n\nip\n\n\nValip IP address\n\n\n\n\n\n\nurl\n\n\nValid URL\n\n\n\n\n\n\nurlActive\n\n\nValid URL with active DNS record\n\n\n\n\n\n\nalpha\n\n\nOnly alphabetic characters\n\n\n\n\n\n\nalphaNum\n\n\nOnly alphabetic and numeric characters\n\n\n\n\n\n\nslug\n\n\nURL slug characters (a-z, 0-9, -, _ )\n\n\n\n\n\n\nregex\n\n\nMust match given regular expression pattern\n\n\n\n\n\n\ndate\n\n\nValid date\n\n\n\n\n\n\ndateFormat\n\n\nValid date in the given format\n\n\n\n\n\n\ndateBefore\n\n\nValid date before given date\n\n\n\n\n\n\ndateAfter\n\n\nValid date after given date\n\n\n\n\n\n\ncontains\n\n\nField is a string that contains given string\n\n\n\n\n\n\ncreditCard\n\n\nValid credit card number\n\n\n\n\n\n\ninstanceOf\n\n\nInstance of given class\n\n\n\n\n\n\noptional\n\n\nValue does not need to be included in data array. If it is however, it must pass validation\n\n\n\n\n\n\n\n\nCustom Rules\n\n\nCustom rules can be defined and validated with a callback function.\n\n\nDefine:\n\n\n1\n2\n3\n4\n5\n?php\n\n\n\n$rules\n \n=\n \narray\n(\n\n  \nphone\n \n=\n \n[\nrequired\n,\n \ncustom:phone\n],\n\n\n);\n\n\n\n\n\n\nCallback:\n\n\n\n\nNote\n\n\nCallback function names must start with \nwfv__\n followed by the rule name\n\n\nThis is to prevent naming collisions.\n\n\n\n\nCreate a callback that evaluates to true or false:\n\n1\n2\n3\n4\n5\n6\n?php\n\n\n// phone field will validate only if the input is \nhi\n ...how cruel\n\n\n\nfunction\n \nwfv__phone\n(\n \n$value\n \n)\n \n{\n\n  \nreturn\n \n(\n \nhi\n \n===\n \n$value\n \n)\n \n?\n \ntrue\n \n:\n \nfalse\n;\n\n\n}", 
            "title": "Rules"
        }, 
        {
            "location": "/guide/rules/#configure", 
            "text": "1\n2\n3\n4\n5\n6 ?php  $rules   =   array ( \n   name   =   [ required ], \n   email =   [ required ,   email ],  )", 
            "title": "Configure"
        }, 
        {
            "location": "/guide/rules/#built-in-rules", 
            "text": "Rule  Description      required  Required field    equals  Field must equal value from another field (eg. new password confirm)    different  Field value must be different than another field    accepted  Checkbox or Radio must be accepted    numeric  Must be numeric    integer  Must be integer number    boolean  Must be bool    array  Must be array    length  Character count must equal given length    lengthBetween  Character count must be within given lengths    lengthMin  Character count must be greater    lengthMax  Character count must be less    min  Minimum    max  Maximum    in  Performs in_array check on given array values    ip  Valip IP address    url  Valid URL    urlActive  Valid URL with active DNS record    alpha  Only alphabetic characters    alphaNum  Only alphabetic and numeric characters    slug  URL slug characters (a-z, 0-9, -, _ )    regex  Must match given regular expression pattern    date  Valid date    dateFormat  Valid date in the given format    dateBefore  Valid date before given date    dateAfter  Valid date after given date    contains  Field is a string that contains given string    creditCard  Valid credit card number    instanceOf  Instance of given class    optional  Value does not need to be included in data array. If it is however, it must pass validation", 
            "title": "Built-in Rules"
        }, 
        {
            "location": "/guide/rules/#custom-rules", 
            "text": "Custom rules can be defined and validated with a callback function.  Define:  1\n2\n3\n4\n5 ?php  $rules   =   array ( \n   phone   =   [ required ,   custom:phone ],  );    Callback:   Note  Callback function names must start with  wfv__  followed by the rule name  This is to prevent naming collisions.   Create a callback that evaluates to true or false: 1\n2\n3\n4\n5\n6 ?php  // phone field will validate only if the input is  hi  ...how cruel  function   wfv__phone (   $value   )   { \n   return   (   hi   ===   $value   )   ?   true   :   false ;  }", 
            "title": "Custom Rules"
        }, 
        {
            "location": "/guide/messages/", 
            "text": "1\n2\n3\n4\n5\n6\n7\n?php\n\n\n\n$messages\n \n=\n \narray\n(\n\n  \nemail\n \n=\n \n[\n\n    \nrequired\n \n=\n \nYour email is required so we can reply back\n\n  \n],\n\n\n);", 
            "title": "Messages"
        }, 
        {
            "location": "/guide/populate/", 
            "text": "Text Fields\n\n\nIf validation fails, these fields would populate using the submitted values:\n\n1\ninput\n \nname\n=\nname\n \ntype\n=\ntext\n \nvalue\n=\n?= $form-\ninput()-\nrender(\nname\n) ?\n\n\n\n\n\n\n1\ntextarea\n \nname\n=\nmsg\n?= $form-\ninput()-\nrender(\nmsg\n) ?\n/\ntextarea\n\n\n\n\n\n\n\n\n\nCheckboxes and Radio\n\n\nConvenience method to repopulate checkbox input\n\n1\nchecked_if\n(\n \nstring\n \n$field\n,\n \nstring\n \n$value\n \n)\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n$field\n\n\nstring\n\n\nnull\n\n\n\n\n\n\n\n\n$value\n\n\nstring\n\n\nnull\n\n\n\n\n\n\n\n\n@return\n \nstring\n|\nnull\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples:\n\n1\n2\n3\n?php\n \n// will echo \nchecked\n if user checked \ngreen\n checkbox\n\n\n\necho\n \n$form\n-\nchecked_if\n(\ncolor\n,\n \ngreen\n);\n \n// checked\n\n\n\n\n\n\nCheckbox:\n\n1\n2\n3\n4\n5\n6\ninput\n\n  \nname\n=\ncolor[]\n\n  \ntype\n=\ncheckbox\n\n  \nvalue\n=\ngreen\n\n  \n?=\n \n$\nform-\nchecked_if(\ncolor\n, \ngreen\n); ?\n\n\n\n\n\n\n\n\nRadio:\n\n1\n2\n3\n4\n5\n6\ninput\n\n  \nname\n=\nagree\n\n  \ntype\n=\nradio\n\n  \nvalue\n=\nyes\n\n  \n?=\n \n$\nform-\nchecked_if(\nagree\n, \nyes\n); ?\n\n\n\n\n\n\n\n\n\n\nSelect and Multi-select\n\n\nConvenience method to repopulate select input\n\n1\nselected_if\n(\n \nstring\n \n$field\n,\n \nstring\n \n$value\n \n)\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n$field\n\n\nstring\n\n\nnull\n\n\n\n\n\n\n\n\n$value\n\n\nstring\n\n\nnull\n\n\n\n\n\n\n\n\n@return\n \nstring\n|\nnull\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples:\n\n1\n2\n3\n?php\n \n// will echo \nselected\n if user selected \ngreen\n in select input\n\n\n\necho\n \n$my_form\n-\nselected_if\n(\ncolor\n,\n \ngreen\n);\n \n// selected\n\n\n\n\n\n\nSelect:\n\n1\n2\n3\n4\n5\n6\n7\nselect\n \nname\n=\ntitle\n\n  \noption\n \nvalue\n=\nSelect...\n/\noption\n\n  \noption\n \nvalue\n=\nMr\n \n?=\n \n$\nform-\nselected_if(\ntitle\n, \nMr\n); ?\nMr\n/\noption\n\n  \noption\n \nvalue\n=\nDr\n \n?=\n \n$\nform-\nselected_if(\ntitle\n, \nDr\n); ?\nDr\n/\noption\n\n  \noption\n \nvalue\n=\nMiss\n \n?=\n \n$\nform-\nselected_if(\ntitle\n, \nMiss\n); ?\nMiss\n/\noption\n\n  \noption\n \nvalue\n=\nMrs\n \n?=\n \n$\nform-\nselected_if(\ntitle\n, \nMrs\n); ?\nMrs\n/\noption\n\n\n/\nselect\n\n\n\n\n\n\nMulti-select:\n\n1\n2\n3\n4\n5\nselect\n \nname\n=\ncolor[]\n \nmultiple\n\n  \noption\n \nvalue\n=\nred\n?=\n \n$\nform-\nselected_if(\ncolor\n, \nred\n); ?\nRed\n/\noption\n\n  \noption\n \nvalue\n=\nblue\n?=\n \n$\nform-\nselected_if(\ncolor\n, \nblue\n); ?\nBlue\n/\noption\n\n  \noption\n \nvalue\n=\ngreen\n?=\n \n$\nform-\nselected_if(\ncolor\n, \ngreen\n); ?\nGreen\n/\noption\n\n\n/\nselect", 
            "title": "Populate"
        }, 
        {
            "location": "/guide/populate/#text-fields", 
            "text": "If validation fails, these fields would populate using the submitted values: 1 input   name = name   type = text   value = ?= $form- input()- render( name ) ?    1 textarea   name = msg ?= $form- input()- render( msg ) ? / textarea", 
            "title": "Text Fields"
        }, 
        {
            "location": "/guide/populate/#checkboxes-and-radio", 
            "text": "Convenience method to repopulate checkbox input 1 checked_if (   string   $field ,   string   $value   )       Parameter  Type  Default  Description      $field  string  null     $value  string  null     @return   string | null        Examples: 1\n2\n3 ?php   // will echo  checked  if user checked  green  checkbox  echo   $form - checked_if ( color ,   green );   // checked    Checkbox: 1\n2\n3\n4\n5\n6 input \n   name = color[] \n   type = checkbox \n   value = green \n   ?=   $ form- checked_if( color ,  green ); ?     Radio: 1\n2\n3\n4\n5\n6 input \n   name = agree \n   type = radio \n   value = yes \n   ?=   $ form- checked_if( agree ,  yes ); ?", 
            "title": "Checkboxes and Radio"
        }, 
        {
            "location": "/guide/populate/#select-and-multi-select", 
            "text": "Convenience method to repopulate select input 1 selected_if (   string   $field ,   string   $value   )       Parameter  Type  Default  Description      $field  string  null     $value  string  null     @return   string | null        Examples: 1\n2\n3 ?php   // will echo  selected  if user selected  green  in select input  echo   $my_form - selected_if ( color ,   green );   // selected    Select: 1\n2\n3\n4\n5\n6\n7 select   name = title \n   option   value = Select... / option \n   option   value = Mr   ?=   $ form- selected_if( title ,  Mr ); ? Mr / option \n   option   value = Dr   ?=   $ form- selected_if( title ,  Dr ); ? Dr / option \n   option   value = Miss   ?=   $ form- selected_if( title ,  Miss ); ? Miss / option \n   option   value = Mrs   ?=   $ form- selected_if( title ,  Mrs ); ? Mrs / option  / select    Multi-select: 1\n2\n3\n4\n5 select   name = color[]   multiple \n   option   value = red ?=   $ form- selected_if( color ,  red ); ? Red / option \n   option   value = blue ?=   $ form- selected_if( color ,  blue ); ? Blue / option \n   option   value = green ?=   $ form- selected_if( color ,  green ); ? Green / option  / select", 
            "title": "Select and Multi-select"
        }, 
        {
            "location": "/guide/input/", 
            "text": "Methods\n\n\ncontains()\n\n\nCheck if the collection contains a key / value pair\n\n1\ncontains\n \n(\n \n$key\n \n=\n \nnull\n,\n \n$value\n \n=\n \nnull\n \n)\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n$key\n\n\nstring\n\n\nnull\n\n\nKey\n\n\n\n\n\n\n$value\n\n\nstring\n\n\nnull\n\n\nValue to look for\n\n\n\n\n\n\n@return\n \nbool\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples\n\n\nBasic:\n\n1\n2\n3\n4\n5\n6\n?php\n\n\n\n$input\n \n=\n \n$form\n-\ninput\n();\n\n\n\n$input\n-\ncontains\n(\n \nemail\n,\n \nfoo@bar.com\n);\n  \n// true\n\n\n$input\n-\ncontains\n(\n \nemail\n,\n \nbar@foo.com\n);\n  \n// false\n\n\n\n\n\n\nConditional:\n\n1\n2\n3\n4\n5\n6\n7\n?php\n\n\n\n$input\n \n=\n \n$form\n-\ninput\n();\n\n\n\nif\n \n(\n \n$input\n-\ncontains\n(\n \nemail\n,\n \nfoo@bar.com\n)\n \n)\n \n{\n\n    \n// ...do something\n\n\n}\n\n\n\n\n\n\n\n\nhas()\n\n\nCheck if the collection has a given key\n\n1\nhas\n \n(\n \n$key\n \n=\n \nnull\n \n)\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n$key\n\n\nstring\n\n\nnull\n\n\nKey to check existence\n\n\n\n\n\n\n@return\n \nbool\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples\n\n\nBasic:\n\n1\n2\n3\n?php\n\n\n\n$form\n-\ninput\n()\n-\nhas\n(\nemail\n);\n  \n// true\n\n\n\n\n\n\nConditional:\n\n1\n2\n3\n4\n5\n6\n7\n?php\n\n\n\n$input\n \n=\n \n$form\n-\ninput\n();\n\n\n\nif\n \n(\n \n$input\n-\nhas\n(\nemail\n)\n \n)\n \n{\n\n    \n// ...do something\n\n\n}\n\n\n\n\n\n\n\n\nis_populated()\n\n\nChecks if the collection has data.\n\n1\nis_populated\n()\n\n\n\n\n\n\n@return\n \nbool\n\n\n\n\nrender()\n\n\nGet an escaped value for safe output.\n\n\nUse this method to output encoded input values, eg. in markup templates\n\n\n1\nrender\n(\n \n$key\n,\n \ncallable\n \n$callback\n \n=\n \nnull\n \n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n$key\n\n\nstring\n\n\n\n\nKey containing the string\n\n\n\n\n\n\n$callback\n\n\ncallable\n\n\nesc_html\n()\n\n\nCallback to pass string\n\n\n\n\n\n\n@return\n \nstring\n|\nnull\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples\n\n\nBasic:\n\n1\n2\n3\n?php\n \n// eg. user entered \nh1\nBar\n/h1\n\n\n\necho\n \n$form\n-\ninput\n()\n-\nrender\n(\nname\n);\n  \n// \nlt;h1\ngt;Bar\nlt;/h1\ngt;\n\n\n\n\n\n\nCallback:\n\n1\n2\n3\n?php\n \n// eg. user entered \nh1\nBar\n/h1\n\n\n\necho\n \n$form\n-\ninput\n()\n-\nrender\n(\nname\n,\n \nstrip_tags\n);\n  \n// Bar\n\n\n\n\n\n\nCustom callback:\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n?php\n \n// over-engineered string concatenation\n\n\n\nfunction\n \nadd_lorem\n(\n \n$string\n \n)\n \n{\n\n  \nreturn\n \n$string\n \n.\n_lorem\n;\n\n\n}\n\n\n\n$new_name\n \n=\n \n$form\n-\ninput\n()\n-\nrender\n(\nname\n,\n \nadd_lorem\n);\n\n\n\necho\n \n$new_name\n;\n  \n// Bar_lorem\n\n\n\n\n\n\nClosure:\n\n1\n2\n3\n4\n5\n6\n7\n?php\n\n\n\n$new_name\n \n=\n \n$form\n-\ninput\n()\n-\nrender\n(\nname\n,\n \nfunction\n(\n \n$string\n \n){\n\n  \nreturn\n \n$string\n \n.\n_lorem\n;\n\n\n});\n\n\n\necho\n \n$new_name\n;\n  \n// Bar_lorem\n\n\n\n\n\n\nCallback with multiple parameters:\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n?php\n \n// even more over-engineered string concatenation\n\n\n\nfunction\n \nwfv_example\n(\n \n$value\n,\n \n$arg2\n,\n \n$arg3\n \n)\n \n{\n\n  \nreturn\n \n$arg2\n \n.\n-\n.\n \n$value\n \n.\n-\n.\n \n$arg3\n;\n\n\n}\n\n\n\n$callback\n \n=\n \narray\n(\n \nwfv_example\n,\n \narray\n(\n \nsecond\n,\n \nthird\n \n)\n \n);\n\n\n\n$new_email\n \n=\n \n$form\n-\ninput\n()\n-\nrender\n(\n \nemail\n,\n \n$callback\n \n);\n\n\n\necho\n \n$new_email\n;\n \n// second-foo@bar.com-third", 
            "title": "Input"
        }, 
        {
            "location": "/guide/input/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/guide/input/#contains", 
            "text": "Check if the collection contains a key / value pair 1 contains   (   $key   =   null ,   $value   =   null   )       Parameter  Type  Default  Description      $key  string  null  Key    $value  string  null  Value to look for    @return   bool        Examples  Basic: 1\n2\n3\n4\n5\n6 ?php  $input   =   $form - input ();  $input - contains (   email ,   foo@bar.com );    // true  $input - contains (   email ,   bar@foo.com );    // false    Conditional: 1\n2\n3\n4\n5\n6\n7 ?php  $input   =   $form - input ();  if   (   $input - contains (   email ,   foo@bar.com )   )   { \n     // ...do something  }", 
            "title": "contains()"
        }, 
        {
            "location": "/guide/input/#has", 
            "text": "Check if the collection has a given key 1 has   (   $key   =   null   )       Parameter  Type  Default  Description      $key  string  null  Key to check existence    @return   bool        Examples  Basic: 1\n2\n3 ?php  $form - input () - has ( email );    // true    Conditional: 1\n2\n3\n4\n5\n6\n7 ?php  $input   =   $form - input ();  if   (   $input - has ( email )   )   { \n     // ...do something  }", 
            "title": "has()"
        }, 
        {
            "location": "/guide/input/#is_populated", 
            "text": "Checks if the collection has data. 1 is_populated ()    @return   bool", 
            "title": "is_populated()"
        }, 
        {
            "location": "/guide/input/#render", 
            "text": "Get an escaped value for safe output.  Use this method to output encoded input values, eg. in markup templates  1 render (   $key ,   callable   $callback   =   null   )       Parameter  Type  Default  Description      $key  string   Key containing the string    $callback  callable  esc_html ()  Callback to pass string    @return   string | null        Examples  Basic: 1\n2\n3 ?php   // eg. user entered  h1 Bar /h1  echo   $form - input () - render ( name );    //  lt;h1 gt;Bar lt;/h1 gt;    Callback: 1\n2\n3 ?php   // eg. user entered  h1 Bar /h1  echo   $form - input () - render ( name ,   strip_tags );    // Bar    Custom callback: 1\n2\n3\n4\n5\n6\n7\n8\n9 ?php   // over-engineered string concatenation  function   add_lorem (   $string   )   { \n   return   $string   . _lorem ;  }  $new_name   =   $form - input () - render ( name ,   add_lorem );  echo   $new_name ;    // Bar_lorem    Closure: 1\n2\n3\n4\n5\n6\n7 ?php  $new_name   =   $form - input () - render ( name ,   function (   $string   ){ \n   return   $string   . _lorem ;  });  echo   $new_name ;    // Bar_lorem    Callback with multiple parameters:  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 ?php   // even more over-engineered string concatenation  function   wfv_example (   $value ,   $arg2 ,   $arg3   )   { \n   return   $arg2   . - .   $value   . - .   $arg3 ;  }  $callback   =   array (   wfv_example ,   array (   second ,   third   )   );  $new_email   =   $form - input () - render (   email ,   $callback   );  echo   $new_email ;   // second-foo@bar.com-third", 
            "title": "render()"
        }, 
        {
            "location": "/guide/errors/", 
            "text": "Methods\n\n\nhas()\n\n\nCheck if a field has a validation error. This can be useful to display error states.\n\n1\nhas\n \n(\n \n$field\n \n=\n \nnull\n \n)\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n$field\n\n\nstring\n\n\nnull\n\n\nName of the field\n\n\n\n\n\n\n@return\n \nbool\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples\n\n\nBasic:\n\n1\n2\n3\n?php\n\n\n\n$form\n-\nerrors\n()\n-\nhas\n(\nemail\n);\n\n\n\n\n\n\nConditional:\n\n1\n2\n3\n4\n5\n6\n7\n?php\n\n\n$errors = $form-\nerrors();\n\n\n?\n\n\n\ndiv\n \nclass\n=\n?php echo ( $errors-\nhas(\nemail\n) ) ? \nerror\n : \n\n  \ninput\n \nname\n=\nemail\n \ntype\n=\ntext\n\n\n/\ndiv\n\n\n\n\n\n\n\n\nfirst()\n\n\nGet the first error message for a given field.\n\n\nThis is useful for displaying inline error messages.\n\n1\nfirst\n(\n \n$field\n \n)\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n$field\n\n\nstring\n\n\n\n\nName of the field\n\n\n\n\n\n\n@return\n \nstring\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples\n\n\nBasic:\n\n1\n2\n3\n?php\n\n\n\necho\n \n$form\n-\nerrors\n()\n-\nfirst\n(\nemail\n);\n\n\n\n\n\n\nIn a template:\n\n1\n2\n3\n4\ndiv\n\n  \ninput\n \nname\n=\nemail\n \ntype\n=\ntext\n\n  \nsmall\n \nclass\n=\nerror\n?php echo $form-\nerrors()-\nfirst(\nemail\n); ?\n/\nsmall\n\n\n/\ndiv", 
            "title": "Errors"
        }, 
        {
            "location": "/guide/errors/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/guide/errors/#has", 
            "text": "Check if a field has a validation error. This can be useful to display error states. 1 has   (   $field   =   null   )       Parameter  Type  Default  Description      $field  string  null  Name of the field    @return   bool        Examples  Basic: 1\n2\n3 ?php  $form - errors () - has ( email );    Conditional: 1\n2\n3\n4\n5\n6\n7 ?php  $errors = $form- errors();  ?  div   class = ?php echo ( $errors- has( email ) ) ?  error  :  \n   input   name = email   type = text  / div", 
            "title": "has()"
        }, 
        {
            "location": "/guide/errors/#first", 
            "text": "Get the first error message for a given field.  This is useful for displaying inline error messages. 1 first (   $field   )       Parameter  Type  Default  Description      $field  string   Name of the field    @return   string        Examples  Basic: 1\n2\n3 ?php  echo   $form - errors () - first ( email );    In a template: 1\n2\n3\n4 div \n   input   name = email   type = text \n   small   class = error ?php echo $form- errors()- first( email ); ? / small  / div", 
            "title": "first()"
        }, 
        {
            "location": "/examples/basic/", 
            "text": "Basic example\n\n\nfunctions.php\n or wherever:\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n?php\n\n\n\n// declare the rules\n\n\n$my_form\n \n=\n \narray\n(\n\n  \nrules\n   \n=\n \narray\n(\n\n    \nfirst_name\n \n=\n \n[\nrequired\n],\n\n    \nemail\n      \n=\n \n[\nrequired\n,\n \nemail\n]\n\n  \n)\n\n\n);\n\n\n\n// validation pass\n\n\nadd_action\n(\n \ncontact_form\n,\n \nmy_form_valid\n \n);\n\n\nfunction\n \nmy_form_valid\n(\n \n$form\n \n)\n \n{\n\n  \n// do something...\n\n\n}\n\n\n\n// validation fail\n\n\nadd_action\n(\n \ncontact_form_fail\n,\n \nmy_form_invalid\n \n);\n\n\nfunction\n \nmy_form_invalid\n(\n \n$form\n \n)\n \n{\n\n  \n// do something...\n\n\n}\n\n\n\n// create the instance\n\n\nwfv_create\n(\n \ncontact_form\n,\n \n$my_form\n \n);\n\n\n\n// $my_form is now an instance of WFV\\Composite\\Form:\n\n\n\n\n\n\nTheme template:\n\n1\n2\n3\n4\n5\nform method=\npost\n\n\n  \ninput name=\nemail\n type=\ntext\n\n\n  \n?php\n \n$my_form\n-\nget_token_fields\n();\n \n?\n\n\n  \ninput type=\nsubmit\n value=\nSend\n\n\n/form", 
            "title": "Basic"
        }, 
        {
            "location": "/examples/basic/#basic-example", 
            "text": "functions.php  or wherever:  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26 ?php  // declare the rules  $my_form   =   array ( \n   rules     =   array ( \n     first_name   =   [ required ], \n     email        =   [ required ,   email ] \n   )  );  // validation pass  add_action (   contact_form ,   my_form_valid   );  function   my_form_valid (   $form   )   { \n   // do something...  }  // validation fail  add_action (   contact_form_fail ,   my_form_invalid   );  function   my_form_invalid (   $form   )   { \n   // do something...  }  // create the instance  wfv_create (   contact_form ,   $my_form   );  // $my_form is now an instance of WFV\\Composite\\Form:    Theme template: 1\n2\n3\n4\n5 form method= post     input name= email  type= text     ?php   $my_form - get_token_fields ();   ?     input type= submit  value= Send  /form", 
            "title": "Basic example"
        }
    ]
}